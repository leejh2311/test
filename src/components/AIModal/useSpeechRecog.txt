import { useEffect, useRef, useState } from "react";

const useSpeechRecognition = (onResult, onError) => {
  const recognitionRef = useRef(null);
  const [isRecognizing, setIsRecognizing] = useState(false);

  const initSpeechRecognition = () => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognition) {
      console.error("This browser does not support speech recognition.");
      onError(new Error("SpeechRecognition is not supported in this browser."));
      return;
    }

    if (!recognitionRef.current) {
      const recognition = new SpeechRecognition();
      recognition.lang = "ko-KR";
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      recognition.onresult = (event) => {
        const speechResult = event.results[0][0].transcript;
        onResult(speechResult);
      };

      recognition.onerror = (event) => {
        onError(event);
        stopSpeechRecognition();
      };

      recognition.onend = () => {
        console.log("Speech recognition ended");
        setIsRecognizing(false);
        startSpeechRecognition();
      };

      recognitionRef.current = recognition;
    }
  };

  const startSpeechRecognition = () => {
    if (!isRecognizing && recognitionRef.current) {
      recognitionRef.current.start();
      setIsRecognizing(true);
      console.log("Speech recognition started");
    } else {
      console.log("Recognition already started");
    }
  };

  const stopSpeechRecognition = () => {
    if (isRecognizing && recognitionRef.current) {
      recognitionRef.current.stop();
      setIsRecognizing(false);
      console.log("Speech recognition stopped");
    }
  };

  const restartSpeechRecognition = () => {
    stopSpeechRecognition();
    setTimeout(startSpeechRecognition, 100);
  };

  useEffect(() => {
    initSpeechRecognition();
    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.onend = null; // Prevent automatic restart on unmount
        stopSpeechRecognition();
      }
    };
  }, []);

  return {
    startSpeechRecognition,
    stopSpeechRecognition,
    restartSpeechRecognition,
  };
};

export default useSpeechRecognition;




222222222222222222

import { useState, useEffect, useCallback, useRef } from "react";

const useSpeechRecognition = (onResult, onError) => {
  const recognition = useRef(null);
  const [isListening, setIsListening] = useState(false);

  useEffect(() => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    if (SpeechRecognition) {
      recognition.current = new SpeechRecognition();
      recognition.current.lang = "ko-KR";
      recognition.current.continuous = true;
      recognition.current.interimResults = false;

      recognition.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        onResult(transcript);
      };

      recognition.current.onerror = (event) => {
        onError(event);
      };

      recognition.current.onend = () => {
        setIsListening(false);
        console.log("Speech recognition ended");
      };
    }
  }, [onResult, onError]);

  const startSpeechRecognition = useCallback(() => {
    if (recognition.current && !isListening) {
      recognition.current.start();
      setIsListening(true);
      console.log("Speech recognition started");
    }
  }, [isListening]);

  const stopSpeechRecognition = useCallback(() => {
    if (recognition.current && isListening) {
      recognition.current.stop();
      setIsListening(false);
      console.log("Speech recognition stopped");
    }
  }, [isListening]);

  const restartSpeechRecognition = useCallback(() => {
    stopSpeechRecognition();
    startSpeechRecognition();
  }, [startSpeechRecognition, stopSpeechRecognition]);

  return {
    startSpeechRecognition,
    stopSpeechRecognition,
    restartSpeechRecognition,
    isListening,
  };
};

export default useSpeechRecognition;
