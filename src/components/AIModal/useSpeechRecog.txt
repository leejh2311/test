import { useEffect, useRef, useState } from "react";

const useSpeechRecognition = (onResult, onError) => {
  const recognitionRef = useRef(null);
  const [isRecognizing, setIsRecognizing] = useState(false);

  const initSpeechRecognition = () => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognition) {
      console.error("This browser does not support speech recognition.");
      onError(new Error("SpeechRecognition is not supported in this browser."));
      return;
    }

    if (!recognitionRef.current) {
      const recognition = new SpeechRecognition();
      recognition.lang = "ko-KR";
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      recognition.onresult = (event) => {
        const speechResult = event.results[0][0].transcript;
        onResult(speechResult);
      };

      recognition.onerror = (event) => {
        onError(event);
        stopSpeechRecognition();
      };

      recognition.onend = () => {
        console.log("Speech recognition ended");
        setIsRecognizing(false);
        startSpeechRecognition();
      };

      recognitionRef.current = recognition;
    }
  };

  const startSpeechRecognition = () => {
    if (!isRecognizing && recognitionRef.current) {
      recognitionRef.current.start();
      setIsRecognizing(true);
      console.log("Speech recognition started");
    } else {
      console.log("Recognition already started");
    }
  };

  const stopSpeechRecognition = () => {
    if (isRecognizing && recognitionRef.current) {
      recognitionRef.current.stop();
      setIsRecognizing(false);
      console.log("Speech recognition stopped");
    }
  };

  const restartSpeechRecognition = () => {
    stopSpeechRecognition();
    setTimeout(startSpeechRecognition, 100);
  };

  useEffect(() => {
    initSpeechRecognition();
    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.onend = null; // Prevent automatic restart on unmount
        stopSpeechRecognition();
      }
    };
  }, []);

  return {
    startSpeechRecognition,
    stopSpeechRecognition,
    restartSpeechRecognition,
  };
};

export default useSpeechRecognition;
